// FlappyBird Game JavaScript - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å‡πÅ‡∏ö‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö
// ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏û‡∏£‡∏£‡∏Ñ‡∏ô‡∏¥‡∏ß‡πÄ‡∏à‡∏ô (New Gen)

class FlappyBirdGame {
    constructor() {
        // ‡∏£‡∏≠‡πÉ‡∏´‡πâ DOM ‡∏û‡∏£‡πâ‡∏≠‡∏°
        if (document.readyState !== 'loading') {
            this.init();
        } else {
            document.addEventListener('DOMContentLoaded', () => this.init());
        }
    }
    
    init() {
        // ‡∏î‡∏∂‡∏á DOM elements
        this.gameContainer = document.getElementById('gameContainer');
        this.bird = document.getElementById('bird');
        this.scoreElement = document.getElementById('score');
        this.gameOverElement = document.getElementById('gameOver');
        this.instructionsElement = document.getElementById('instructions');
        this.startButton = document.getElementById('startButton');
        this.restartButton = document.getElementById('restartButton');
        this.finalScoreElement = document.getElementById('finalScore');
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ elements ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß
        if (!this.gameContainer || !this.bird || !this.scoreElement) {
            console.error('Required game elements not found');
            return;
        }
        
        // ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡∏° (‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô)
        this.gameWidth = this.gameContainer.offsetWidth;
        this.gameHeight = this.gameContainer.offsetHeight;
        this.birdStartY = this.gameHeight / 2 - 11;
        
        // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å
        this.baseGravity = 0.4;           // ‡πÅ‡∏£‡∏á‡πÇ‡∏ô‡πâ‡∏°‡∏ñ‡πà‡∏ß‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        this.baseJumpForce = -8.5;        // ‡πÅ‡∏£‡∏á‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        this.basePipeWidth = 65;          // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        this.basePipeGap = 160;           // ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏™‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        this.basePipeSpeed = 1.8;         // ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏™‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        this.basePipeInterval = 2800;     // ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡πÄ‡∏™‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (ms)
        
        // ‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å
        this.gravity = this.baseGravity;
        this.jumpForce = this.baseJumpForce;
        this.pipeWidth = this.basePipeWidth;
        this.pipeGap = this.basePipeGap;
        this.pipeSpeed = this.basePipeSpeed;
        this.pipeInterval = this.basePipeInterval;
        
        this.bestScore = 0;
        this.currentLevel = 1;
        
        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏Å‡∏°
        this.reset();
        this.setupEventListeners();
        this.createClouds();
        this.setupResponsive();
        
        console.log('FlappyBird game with progressive difficulty initialized');
    }
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
    calculateDifficulty() {
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        const newLevel = Math.floor(this.score / 10) + 1;
        
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        if (newLevel > this.currentLevel) {
            this.currentLevel = newLevel;
            this.showLevelUp();
        }
        
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡∏°‡πà
        const difficultyFactor = Math.min(this.currentLevel * 0.15, 2.0); // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏£‡∏á‡πÇ‡∏ô‡πâ‡∏°‡∏ñ‡πà‡∏ß‡∏á
        this.gravity = this.baseGravity + (difficultyFactor * 0.1);
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏™‡∏≤
        this.pipeSpeed = this.basePipeSpeed + (difficultyFactor * 0.4);
        
        // ‡∏•‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏™‡∏≤ (‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ)
        this.pipeGap = Math.max(this.basePipeGap - (difficultyFactor * 8), 120);
        
        // ‡∏•‡∏î‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡πÄ‡∏™‡∏≤ (‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏≤‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô)
        this.pipeInterval = Math.max(this.basePipeInterval - (difficultyFactor * 200), 1800);
        
        // ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏≤ (‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏¢‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢)
        this.pipeWidth = Math.max(this.basePipeWidth - (difficultyFactor * 2), 50);
        
        // ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏£‡∏á‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î (‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏¢‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢)
        this.jumpForce = Math.max(this.baseJumpForce - (difficultyFactor * 0.3), -12);
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö
    showLevelUp() {
        const levelUpMsg = document.createElement('div');
        levelUpMsg.className = 'level-up-message';
        levelUpMsg.innerHTML = `
            <div>üéâ ‡∏£‡∏∞‡∏î‡∏±‡∏ö ${this.currentLevel} üéâ</div>
            <div>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô!</div>
        `;
        levelUpMsg.style.cssText = `
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: linear-gradient(45deg, #ff6b6b, #ffd93d);
            color: white;
            padding: 20px;
            border-radius: 15px;
            font-size: 20px;
            font-weight: bold;
            text-align: center;
            box-shadow: 0 10px 25px rgba(0,0,0,0.3);
            z-index: 100;
            animation: levelUpPulse 2s ease-in-out;
            border: 3px solid #fff;
        `;
        
        this.gameContainer.appendChild(levelUpMsg);
        
        // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏á 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        setTimeout(() => {
            if (levelUpMsg.parentNode) {
                levelUpMsg.remove();
            }
        }, 2000);
    }
    
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏Å‡∏°
    reset() {
        this.birdY = this.birdStartY;
        this.birdVelocity = 0;
        this.score = 0;
        this.gameRunning = false;
        this.pipes = [];
        this.gameStarted = false;
        this.lastPipeTime = 0;
        this.animationId = null;
        this.currentLevel = 1;
        
        // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        this.gravity = this.baseGravity;
        this.jumpForce = this.baseJumpForce;
        this.pipeWidth = this.basePipeWidth;
        this.pipeGap = this.basePipeGap;
        this.pipeSpeed = this.basePipeSpeed;
        this.pipeInterval = this.basePipeInterval;
        
        // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ô‡∏Å
        this.bird.style.top = this.birdY + 'px';
        this.bird.style.left = '80px';
        this.bird.style.transform = 'rotate(0deg)';
        
        // ‡∏•‡∏ö‡πÄ‡∏™‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        this.clearPipes();
        
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
        this.updateScore();
        
        // ‡∏ã‡πà‡∏≠‡∏ô/‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö UI
        if (this.gameOverElement) {
            this.gameOverElement.style.display = 'none';
        }
        if (this.instructionsElement) {
            this.instructionsElement.style.display = 'block';
        }
        
        // ‡∏•‡∏ö‡∏Ñ‡∏•‡∏≤‡∏™‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå
        this.gameContainer.classList.remove('hit-animation');
        this.bird.classList.remove('flap-animation');
        
        // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
        const levelUpMessages = this.gameContainer.querySelectorAll('.level-up-message');
        levelUpMessages.forEach(msg => msg.remove());
    }
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Event Listeners
    setupEventListeners() {
        // ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°
        if (this.startButton) {
            this.startButton.addEventListener('click', () => {
                this.startGame();
            });
        }
        
        // ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà
        if (this.restartButton) {
            this.restartButton.addEventListener('click', () => {
                this.reset();
            });
        }
        
        // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
        this.gameContainer.addEventListener('click', (e) => {
            // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°
            if (e.target.tagName === 'BUTTON') return;
            this.jump();
        });
        
        // ‡πÅ‡∏ï‡∏∞‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠)
        this.gameContainer.addEventListener('touchstart', (e) => {
            e.preventDefault();
            if (e.target.tagName === 'BUTTON') return;
            this.jump();
        });
        
        // ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° space
        document.addEventListener('keydown', (e) => {
            if (e.code === 'Space') {
                e.preventDefault();
                this.jump();
            }
        });
    }
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Responsive
    setupResponsive() {
        window.addEventListener('resize', () => {
            this.gameWidth = this.gameContainer.offsetWidth;
            this.gameHeight = this.gameContainer.offsetHeight;
            
            // ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ô‡∏Å‡πÉ‡∏´‡∏°‡πà
            if (this.birdY > this.gameHeight - 22) {
                this.birdY = this.gameHeight - 22;
            }
        });
    }
    
    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°
    startGame() {
        this.gameRunning = true;
        this.gameStarted = true;
        
        if (this.instructionsElement) {
            this.instructionsElement.style.display = 'none';
        }
        
        this.lastPipeTime = performance.now();
        this.gameLoop();
    }
    
    // ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î‡∏Ç‡∏≠‡∏á‡∏ô‡∏Å
    jump() {
        if (!this.gameStarted) {
            this.startGame();
            return;
        }
        
        if (this.gameRunning) {
            this.birdVelocity = this.jumpForce;
            
            // ‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡∏Å‡∏≤‡∏£‡∏ö‡∏¥‡∏ô
            this.bird.style.transform = 'rotate(-15deg)';
            setTimeout(() => {
                if (this.gameRunning) {
                    this.bird.style.transform = 'rotate(0deg)';
                }
            }, 200);
        }
    }
    
    // ‡∏•‡∏π‡∏õ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏°
    gameLoop() {
        if (!this.gameRunning) return;
        
        this.updateBird();
        this.updatePipes();
        this.checkCollisions();
        this.calculateDifficulty(); // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡∏°‡πà
        this.updateScore();
        
        this.animationId = requestAnimationFrame(() => this.gameLoop());
    }
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏Ç‡∏≠‡∏á‡∏ô‡∏Å
    updateBird() {
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏£‡∏á‡πÇ‡∏ô‡πâ‡∏°‡∏ñ‡πà‡∏ß‡∏á
        this.birdVelocity += this.gravity;
        this.birdY += this.birdVelocity;
        
        // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏Ç‡∏≠‡∏á‡∏ô‡∏Å
        if (this.birdY < 0) {
            this.birdY = 0;
            this.birdVelocity = 0;
        }
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏ô‡∏û‡∏∑‡πâ‡∏ô
        if (this.birdY > this.gameHeight - 22) {
            this.birdY = this.gameHeight - 22;
            this.gameOver();
            return;
        }
        
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ô‡∏Å
        this.bird.style.top = this.birdY + 'px';
        
        // ‡∏´‡∏°‡∏∏‡∏ô‡∏ô‡∏Å‡∏ï‡∏≤‡∏°‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß
        const rotation = Math.min(Math.max(this.birdVelocity * 3, -30), 30);
        this.bird.style.transform = `rotate(${rotation}deg)`;
    }
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏™‡∏≤
    updatePipes() {
        const currentTime = performance.now();
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà
        if (currentTime - this.lastPipeTime > this.pipeInterval) {
            this.createPipe();
            this.lastPipeTime = currentTime;
        }
        
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏™‡∏≤
        for (let i = this.pipes.length - 1; i >= 0; i--) {
            const pipe = this.pipes[i];
            pipe.x -= this.pipeSpeed;
            
            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ô DOM
            if (pipe.topElement && pipe.bottomElement) {
                pipe.topElement.style.left = pipe.x + 'px';
                pipe.bottomElement.style.left = pipe.x + 'px';
            }
            
            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏™‡∏≤
            if (!pipe.passed && pipe.x + this.pipeWidth < 80) {
                pipe.passed = true;
                this.score++;
            }
            
            // ‡∏•‡∏ö‡πÄ‡∏™‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
            if (pipe.x + this.pipeWidth < 0) {
                this.removePipe(i);
            }
        }
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏≤‡πÉ‡∏´‡∏°‡πà
    createPipe() {
        const minHeight = 80;
        const maxHeight = this.gameHeight - this.pipeGap - 80;
        const topHeight = Math.random() * (maxHeight - minHeight) + minHeight;
        const bottomHeight = this.gameHeight - topHeight - this.pipeGap;
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏≤‡∏ö‡∏ô
        const pipeTop = document.createElement('div');
        pipeTop.className = 'pipe pipe-top';
        pipeTop.style.height = topHeight + 'px';
        pipeTop.style.left = this.gameWidth + 'px';
        pipeTop.style.position = 'absolute';
        pipeTop.style.width = this.pipeWidth + 'px';
        pipeTop.style.background = '#228B22';
        pipeTop.style.border = '2px solid #006400';
        pipeTop.style.borderRadius = '5px';
        pipeTop.style.top = '0';
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏≤‡∏•‡πà‡∏≤‡∏á
        const pipeBottom = document.createElement('div');
        pipeBottom.className = 'pipe pipe-bottom';
        pipeBottom.style.height = bottomHeight + 'px';
        pipeBottom.style.left = this.gameWidth + 'px';
        pipeBottom.style.position = 'absolute';
        pipeBottom.style.width = this.pipeWidth + 'px';
        pipeBottom.style.background = '#228B22';
        pipeBottom.style.border = '2px solid #006400';
        pipeBottom.style.borderRadius = '5px';
        pipeBottom.style.bottom = '0';
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡∏≤‡∏•‡∏á‡πÉ‡∏ô DOM
        this.gameContainer.appendChild(pipeTop);
        this.gameContainer.appendChild(pipeBottom);
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡∏≤‡∏•‡∏á‡πÉ‡∏ô array
        this.pipes.push({
            x: this.gameWidth,
            topHeight: topHeight,
            bottomHeight: bottomHeight,
            topElement: pipeTop,
            bottomElement: pipeBottom,
            passed: false
        });
    }
    
    // ‡∏•‡∏ö‡πÄ‡∏™‡∏≤
    removePipe(index) {
        if (index < 0 || index >= this.pipes.length) {
            console.warn('Invalid pipe index:', index);
            return;
        }
        
        const pipe = this.pipes[index];
        if (pipe) {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ element ‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô DOM ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (pipe.topElement && pipe.topElement.parentNode === this.gameContainer) {
                try {
                    this.gameContainer.removeChild(pipe.topElement);
                } catch (e) {
                    console.warn('Error removing top pipe:', e);
                }
            }
            
            if (pipe.bottomElement && pipe.bottomElement.parentNode === this.gameContainer) {
                try {
                    this.gameContainer.removeChild(pipe.bottomElement);
                } catch (e) {
                    console.warn('Error removing bottom pipe:', e);
                }
            }
            
            // ‡∏•‡∏ö‡∏à‡∏≤‡∏Å array
            this.pipes.splice(index, 1);
        }
    }
    
    // ‡∏•‡∏ö‡πÄ‡∏™‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    clearPipes() {
        // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡∏•‡∏ö‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
        this.pipes.forEach((pipe, index) => {
            if (pipe.topElement && pipe.topElement.parentNode) {
                try {
                    this.gameContainer.removeChild(pipe.topElement);
                } catch (e) {
                    console.warn('Error removing top pipe:', e);
                }
            }
            if (pipe.bottomElement && pipe.bottomElement.parentNode) {
                try {
                    this.gameContainer.removeChild(pipe.bottomElement);
                } catch (e) {
                    console.warn('Error removing bottom pipe:', e);
                }
            }
        });
        
        // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡∏•‡∏ö‡∏î‡πâ‡∏ß‡∏¢ querySelectorAll (‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)
        const remainingPipes = this.gameContainer.querySelectorAll('.pipe');
        remainingPipes.forEach(pipe => {
            try {
                pipe.remove();
            } catch (e) {
                console.warn('Error removing remaining pipe:', e);
            }
        });
        
        // ‡∏•‡πâ‡∏≤‡∏á array
        this.pipes = [];
    }
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô forceCleanup() ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÅ‡∏ö‡∏ö‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö
    forceCleanup() {
        // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å animation frame
        if (this.animationId) {
            cancelAnimationFrame(this.animationId);
            this.animationId = null;
        }
        
        // ‡∏•‡∏ö‡πÄ‡∏™‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏î‡πâ‡∏ß‡∏¢ querySelector
        const allPipes = this.gameContainer.querySelectorAll('.pipe');
        allPipes.forEach(pipe => {
            try {
                pipe.remove();
            } catch (e) {
                console.warn('Force cleanup error:', e);
            }
        });
        
        // ‡∏•‡πâ‡∏≤‡∏á array
        this.pipes = [];
        
        // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö
        const levelUpMessages = this.gameContainer.querySelectorAll('.level-up-message');
        levelUpMessages.forEach(msg => msg.remove());
        
        // ‡∏•‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏Ü‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        const clouds = this.gameContainer.querySelectorAll('.cloud');
        clouds.forEach(cloud => {
            try {
                cloud.remove();
            } catch (e) {
                console.warn('Error removing cloud:', e);
            }
        });
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏ô
    checkCollisions() {
        const birdRect = {
            x: 80,
            y: this.birdY,
            width: 30,
            height: 22
        };
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏ô‡∏Å‡∏±‡∏ö‡πÄ‡∏™‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡πâ‡∏ô
        for (let i = 0; i < this.pipes.length; i++) {
            const pipe = this.pipes[i];
            
            // ‡πÄ‡∏™‡∏≤‡∏ö‡∏ô
            const topPipeRect = {
                x: pipe.x,
                y: 0,
                width: this.pipeWidth,
                height: pipe.topHeight
            };
            
            // ‡πÄ‡∏™‡∏≤‡∏•‡πà‡∏≤‡∏á
            const bottomPipeRect = {
                x: pipe.x,
                y: this.gameHeight - pipe.bottomHeight,
                width: this.pipeWidth,
                height: pipe.bottomHeight
            };
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏ô
            if (this.isColliding(birdRect, topPipeRect) || 
                this.isColliding(birdRect, bottomPipeRect)) {
                this.gameOver();
                return;
            }
        }
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 2 ‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°
    isColliding(rect1, rect2) {
        return rect1.x < rect2.x + rect2.width &&
               rect1.x + rect1.width > rect2.x &&
               rect1.y < rect2.y + rect2.height &&
               rect1.y + rect1.height > rect2.y;
    }
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
    updateScore() {
        if (this.scoreElement) {
            this.scoreElement.textContent = `‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: ${this.score} | ‡∏£‡∏∞‡∏î‡∏±‡∏ö: ${this.currentLevel}`;
        }
    }
    
    // ‡∏à‡∏ö‡πÄ‡∏Å‡∏°
    gameOver() {
        this.gameRunning = false;
        
        // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å animation loop
        if (this.animationId) {
            cancelAnimationFrame(this.animationId);
        }
        
        // ‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏ô‡∏™‡∏∞‡πÄ‡∏ó‡∏∑‡∏≠‡∏ô
        this.gameContainer.style.animation = 'shake 0.5s';
        setTimeout(() => {
            this.gameContainer.style.animation = '';
        }, 500);
        
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
        if (this.score > this.bestScore) {
            this.bestScore = this.score;
        }
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
        if (this.finalScoreElement) {
            this.finalScoreElement.innerHTML = `
                <div>‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: ${this.score}</div>
                <div>‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: ${this.currentLevel}</div>
                <div>‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: ${this.bestScore}</div>
            `;
        }
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏Å‡∏°‡πÇ‡∏≠‡πÄ‡∏ß‡∏≠‡∏£‡πå
        setTimeout(() => {
            if (this.gameOverElement) {
                this.gameOverElement.style.display = 'block';
            }
        }, 500);
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏Ü
    createClouds() {
        for (let i = 0; i < 3; i++) {
            const cloud = document.createElement('div');
            cloud.className = 'cloud';
            cloud.style.position = 'absolute';
            cloud.style.width = Math.random() * 60 + 30 + 'px';
            cloud.style.height = Math.random() * 20 + 15 + 'px';
            cloud.style.top = Math.random() * 100 + 20 + 'px';
            cloud.style.left = Math.random() * this.gameWidth + 'px';
            cloud.style.background = 'white';
            cloud.style.borderRadius = '50px';
            cloud.style.opacity = '0.8';
            cloud.style.pointerEvents = 'none';
            this.gameContainer.appendChild(cloud);
        }
    }
    
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô debug ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    debugGameState() {
        console.log('=== Game Debug Info ===');
        console.log('Score:', this.score);
        console.log('Level:', this.currentLevel);
        console.log('Difficulty Settings:', {
            gravity: this.gravity,
            pipeSpeed: this.pipeSpeed,
            pipeGap: this.pipeGap,
            pipeInterval: this.pipeInterval,
            pipeWidth: this.pipeWidth
        });
        console.log('Pipes in array:', this.pipes.length);
        console.log('Pipes in DOM:', this.gameContainer.querySelectorAll('.pipe').length);
        console.log('Game running:', this.gameRunning);
        console.log('Animation ID:', this.animationId);
    }
}

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠ DOM ‡∏û‡∏£‡πâ‡∏≠‡∏°
document.addEventListener('DOMContentLoaded', () => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡πÄ‡∏Å‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (document.getElementById('gameContainer')) {
        new FlappyBirdGame();
    }
});

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πÑ‡∏ï‡∏•‡πå CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡πÄ‡∏™‡∏£‡∏¥‡∏°
const additionalStyles = `
    .pipe {
        z-index: 5;
        transition: width 0.3s ease;
    }
    
    .cloud {
        animation: float 20s infinite linear;
    }
    
    @keyframes float {
        0% { transform: translateX(-100px); }
        100% { transform: translateX(calc(100vw + 100px)); }
    }
    
    @keyframes shake {
        0%, 100% { transform: translateX(0); }
        10%, 30%, 50%, 70%, 90% { transform: translateX(-5px); }
        20%, 40%, 60%, 80% { transform: translateX(5px); }
    }
    
    @keyframes levelUpPulse {
        0% { 
            transform: translate(-50%, -50%) scale(0.5);
            opacity: 0;
        }
        50% { 
            transform: translate(-50%, -50%) scale(1.1);
            opacity: 1;
        }
        100% { 
            transform: translate(-50%, -50%) scale(1);
            opacity: 0;
        }
    }
    
    .level-up-message {
        text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
        font-family: 'Arial', sans-serif;
        pointer-events: none;
    }
    
    .level-up-message div:first-child {
        font-size: 24px;
        margin-bottom: 5px;
    }
    
    .level-up-message div:last-child {
        font-size: 16px;
        opacity: 0.9;
    }
`;

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏•‡∏á‡πÉ‡∏ô head
if (document.head) {
    const styleSheet = document.createElement('style');
    styleSheet.textContent = additionalStyles;
    document.head.appendChild(styleSheet);
}